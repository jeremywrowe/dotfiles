#!/usr/bin/env ruby
require 'fileutils'
require 'bundler/inline'


gemfile do
  source 'https://rubygems.org'
  gem 'pastel'
end

include TTY::Color

class Version
  include Comparable

  attr_reader :major, :minor, :micro

  def initialize(major = 0, minor = 0, micro = 0)
    @major = major || 0
    @minor = minor || 0
    @micro = micro || 0
  end

  def to_s(*)
    [major, minor, micro].reject(&:nil?).join(".")
  end

  def <=>(other)
    [major, minor, micro] <=> [other.major, other.minor, other.micro]
  end
end

class Rule
  def initialize(version)
    @version = version
  end

  def pass?(other_version)
    @version <= other_version
  end
end

RULE_SET = {
  "ruby" => Rule.new(Version.new(2, 5)),
  "elixir" => Rule.new(Version.new(1, 3)),
  "erlang" => Rule.new(Version.new(19, 0)),
  "nodejs" => Rule.new(Version.new(8, 0)),
}

class ProjectInfo
  attr_reader :project, :infos

  def initialize(project, raw)
    @project = project
    @raw = raw
    @infos = parse_raw_info
  end

  def to_s(*)
    pastel = Pastel.new
    pass = @infos.reject(&:nil?).all?(&:pass?)
    output = []
    output << "-" * 80
    output << "| #{pastel.bold(project.ljust(69))} (#{pass ? pastel.green("PASS") : pastel.red("FAIL")}) |"
    output << "-" * 80
    output += @infos
    output << "+" * 80
    output << " "
    output.join("\n")
  end

  private

  def parse_raw_info
    @raw.strip.split("\n").map do |line|
      LanguageInfo.new(line)
    end
  end

  class LanguageInfo
    def initialize(raw)
      @raw = raw.strip
      parse
      @rule = RULE_SET[@language]
      @pastel = Pastel.new
    end

    def unknown?
      @rule.nil?
    end

    def pass?
      return false unless @rule
      @rule.pass?(@version)
    end

    def to_s(*)
      if unknown?
        "#{@language.ljust(6)}: #{@pastel.yellow(@version)}"
      elsif pass?
        "#{@language.ljust(6)}: #{@pastel.green(@version)}"
      else
        "#{@language.ljust(6)}: #{@pastel.red(@version)}"
      end
    end

    private

    def parse
      @language, version = @raw.split(/\s+/)
      @language.downcase!
      version_parts = version.to_s.split(".").map(&:to_i)
      @version = Version.new(*version_parts.first(3))
    end
  end
end

def output_info(info, prefix = nil)
  prefix ? "#{prefix} #{info}" : info
end

def convert_info(project, info)
  ProjectInfo.new(project, info)
end

Dir.glob('*').each do |project|
  FileUtils.cd(project) do
    info = if File.exist?('.tool-versions')
      output_info(File.read('.tool-versions'))
    elsif File.exist?('.ruby-version')
      output_info(File.read('.ruby-version'), "ruby")
    end

    if info
      puts convert_info(project, info)
    end
  end
end
